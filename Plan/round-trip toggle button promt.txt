# Σκοπός
Θα σου δώσω το πλήρες HTML αρχείο ενός web app σχεδιασμού διαδρομής.  
Καθήκον σου είναι να προσθέσεις δύο νέες λειτουργίες χωρίς να αλλάξεις τίποτα άλλο στον υπάρχοντα κώδικα.

# Λειτουργία 1 – Round-Trip Toggle
Στο Floating Menu Panel (δεξιά στο UI) πρόσθεσε:

1. Ένα κουμπί-διακόπτη (toggle switch) με label «Round Trip».
2. Όταν ο χρήστης ενεργοποιεί το switch:
   • Αν υπάρχουν 2+ σημεία (pins), προσθέτει αυτόματα στο τέλος της λίστας ένα ακόμα pin με τις συντεταγμένες του πρώτου σημείου (δημιουργεί κυκλική διαδρομή).
   • Αν το switch απενεργοποιηθεί, αφαιρεί αυτόματα το τελευταίο pin (εφόσον είναι το ίδιο με το πρώτο).
3. Η εμφάνιση του switch να ταιριάζει με το υπάρχον Tailwind στυλ (λευκό φόντο, μπλε accent).

# Λειτουργία 2 – Βέλτιστη διαδρομή στο οδικό δίκτυο
Αντί να συνδέει τα σημεία με ευθείες γραμμές, το app πρέπει πάντα να υπολογίζει και να εμφανίζει τη βέλτιστη διαδρομή μέσω του υπάρχοντος οδικού δικτύου.  
Για να το πετύχεις:
• Χρησιμοποίησε τις υπάρχουσες συναρτήσεις fetchFromORS() ή fetchFromGraphHopper() (οι οποίες ήδη επιστρέφουν διαδρομές οδικού δικτύου) και βεβαιώσου ότι καλούνται κανονικά σε κάθε αλλαγή στα pins ή στο round-trip toggle.
• Δεν χρειάζεται να προσθέσεις νέα λογική δρομολόγησης· απλώς βεβαιώσου ότι οι συναρτήσεις αυτές τρέχουν πάντα.

# Τεχνικές οδηγίες
• Χρησιμοποίησε το state.pins και state.markers όπως ήδη ορίζονται στο script.  
• Μετά την προσθήκη/αφαίρεση του τελικού pin, κάλεσε αυτόματα calculateRoute() για να ξανασχεδιαστεί η διαδρομή.  
• Το switch πρέπει να βρίσκεται μέσα στο div id="menuPanel", κάτω από τα υπάρχοντα κουμπιά «Καθαρισμός» και «Λήψη GPX».  
• Μην τροποποιήσεις κανένα άλλο στοιχείο του κώδικα (χάρτης, στατιστικά, elevation chart κ.λπ.).

# Αποτέλεσμα
Επέστρεψε ολόκληρο το ενημερωμένο HTML αρχείο με τις παραπάνω προσθήκες.